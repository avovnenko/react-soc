{"ast":null,"code":"import _objectSpread from \"/Users/avovnenko/PhpstormProjects/ReactApp/01-first-project/react-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { authAPI } from \"../api/api\";\nimport { stopSubmit } from \"redux-form\";\nconst SET_USER_DATA = 'SET-USER-DATA';\nlet initialState = {\n  userId: null,\n  email: null,\n  login: null,\n  img: null,\n  isAuth: false\n};\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_USER_DATA:\n      return _objectSpread({}, state, {}, action.payload);\n\n    default:\n      return state;\n  }\n};\n\nexport const setAuthUserData = (userId, email, login, isAuth) => ({\n  type: SET_USER_DATA,\n  payload: {\n    userId,\n    email,\n    login,\n    isAuth\n  }\n});\nexport default authReducer;\nexport const authMe = () => dispatch => {\n  return authAPI.me().then(response => {\n    if (response.resultCode === 0) {\n      let _response$data = response.data,\n          id = _response$data.id,\n          email = _response$data.email,\n          login = _response$data.login;\n      dispatch(setAuthUserData(id, email, login, true));\n    }\n  });\n};\nexport const userLogin = (email, password, rememberMe, captcha) => dispatch => {\n  authAPI.login(email, password, rememberMe, captcha).then(response => {\n    if (response.resultCode === 0) {\n      dispatch(authMe());\n    } else {\n      dispatch(stopSubmit(\"login\", {\n        _error: response.messages.length > 0 ? response.messages[0] : 'Some error!'\n      }));\n    }\n  });\n};\nexport const userLogout = () => dispatch => {\n  authAPI.logout().then(response => {\n    if (response.resultCode === 0) {\n      dispatch(setAuthUserData(null, null, null, false));\n    }\n  });\n};","map":{"version":3,"sources":["/Users/avovnenko/PhpstormProjects/ReactApp/01-first-project/react-2/src/redux/authReducer.js"],"names":["authAPI","stopSubmit","SET_USER_DATA","initialState","userId","email","login","img","isAuth","authReducer","state","action","type","payload","setAuthUserData","authMe","dispatch","me","then","response","resultCode","data","id","userLogin","password","rememberMe","captcha","_error","messages","length","userLogout","logout"],"mappings":";AAAA,SAAQA,OAAR,QAAsB,YAAtB;AACA,SAAQC,UAAR,QAAyB,YAAzB;AAEA,MAAMC,aAAa,GAAG,eAAtB;AAEA,IAAIC,YAAY,GAAG;AAClBC,EAAAA,MAAM,EAAE,IADU;AAElBC,EAAAA,KAAK,EAAE,IAFW;AAGlBC,EAAAA,KAAK,EAAE,IAHW;AAIlBC,EAAAA,GAAG,EAAE,IAJa;AAKlBC,EAAAA,MAAM,EAAE;AALU,CAAnB;;AAQA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGP,YAAT,EAAuBQ,MAAvB,KAAkC;AAErD,UAAQA,MAAM,CAACC,IAAf;AACC,SAAKV,aAAL;AACC,+BACIQ,KADJ,MAEIC,MAAM,CAACE,OAFX;;AAID;AACC,aAAOH,KAAP;AAPF;AASA,CAXD;;AAaA,OAAO,MAAMI,eAAe,GAAG,CAACV,MAAD,EAASC,KAAT,EAAgBC,KAAhB,EAAuBE,MAAvB,MAAmC;AAACI,EAAAA,IAAI,EAAEV,aAAP;AAAsBW,EAAAA,OAAO,EAAE;AAACT,IAAAA,MAAD;AAASC,IAAAA,KAAT;AAAgBC,IAAAA,KAAhB;AAAuBE,IAAAA;AAAvB;AAA/B,CAAnC,CAAxB;AAGP,eAAeC,WAAf;AAEA,OAAO,MAAMM,MAAM,GAAG,MACpBC,QAAD,IAAc;AACb,SAAOhB,OAAO,CAACiB,EAAR,GACLC,IADK,CACAC,QAAQ,IAAI;AACjB,QAAIA,QAAQ,CAACC,UAAT,KAAwB,CAA5B,EAA+B;AAAA,2BACLD,QAAQ,CAACE,IADJ;AAAA,UACzBC,EADyB,kBACzBA,EADyB;AAAA,UACrBjB,KADqB,kBACrBA,KADqB;AAAA,UACdC,KADc,kBACdA,KADc;AAE9BU,MAAAA,QAAQ,CAACF,eAAe,CAACQ,EAAD,EAAKjB,KAAL,EAAYC,KAAZ,EAAmB,IAAnB,CAAhB,CAAR;AACA;AACD,GANK,CAAP;AAOA,CATK;AAUP,OAAO,MAAMiB,SAAS,GAAG,CAAClB,KAAD,EAAQmB,QAAR,EAAkBC,UAAlB,EAA8BC,OAA9B,KACvBV,QAAD,IAAc;AACbhB,EAAAA,OAAO,CAACM,KAAR,CAAcD,KAAd,EAAqBmB,QAArB,EAA+BC,UAA/B,EAA2CC,OAA3C,EACER,IADF,CACOC,QAAQ,IAAI;AACjB,QAAIA,QAAQ,CAACC,UAAT,KAAwB,CAA5B,EAA+B;AAC9BJ,MAAAA,QAAQ,CAACD,MAAM,EAAP,CAAR;AACA,KAFD,MAEO;AACNC,MAAAA,QAAQ,CAACf,UAAU,CAAC,OAAD,EAAU;AAAC0B,QAAAA,MAAM,EAAER,QAAQ,CAACS,QAAT,CAAkBC,MAAlB,GAA2B,CAA3B,GAA+BV,QAAQ,CAACS,QAAT,CAAkB,CAAlB,CAA/B,GAAsD;AAA/D,OAAV,CAAX,CAAR;AACA;AACD,GAPF;AAQA,CAVK;AAWP,OAAO,MAAME,UAAU,GAAG,MACxBd,QAAD,IAAc;AACbhB,EAAAA,OAAO,CAAC+B,MAAR,GACEb,IADF,CACOC,QAAQ,IAAI;AACjB,QAAIA,QAAQ,CAACC,UAAT,KAAwB,CAA5B,EAA+B;AAC9BJ,MAAAA,QAAQ,CAACF,eAAe,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,KAAnB,CAAhB,CAAR;AACA;AACD,GALF;AAMA,CARK","sourcesContent":["import {authAPI} from \"../api/api\";\nimport {stopSubmit} from \"redux-form\";\n\nconst SET_USER_DATA = 'SET-USER-DATA';\n\nlet initialState = {\n\tuserId: null,\n\temail: null,\n\tlogin: null,\n\timg: null,\n\tisAuth: false\n};\n\nconst authReducer = (state = initialState, action) => {\n\n\tswitch (action.type) {\n\t\tcase SET_USER_DATA:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t...action.payload\n\t\t\t};\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport const setAuthUserData = (userId, email, login, isAuth) => ({type: SET_USER_DATA, payload: {userId, email, login, isAuth}});\n\n\nexport default authReducer;\n\nexport const authMe = () =>\n\t(dispatch) => {\n\t\treturn authAPI.me()\n\t\t\t.then(response => {\n\t\t\t\tif (response.resultCode === 0) {\n\t\t\t\t\tlet {id, email, login} = response.data;\n\t\t\t\t\tdispatch(setAuthUserData(id, email, login, true));\n\t\t\t\t}\n\t\t\t});\n\t};\nexport const userLogin = (email, password, rememberMe, captcha) =>\n\t(dispatch) => {\n\t\tauthAPI.login(email, password, rememberMe, captcha)\n\t\t\t.then(response => {\n\t\t\t\tif (response.resultCode === 0) {\n\t\t\t\t\tdispatch(authMe());\n\t\t\t\t} else {\n\t\t\t\t\tdispatch(stopSubmit(\"login\", {_error: response.messages.length > 0 ? response.messages[0] : 'Some error!' }));\n\t\t\t\t}\n\t\t\t});\n\t};\nexport const userLogout = () =>\n\t(dispatch) => {\n\t\tauthAPI.logout()\n\t\t\t.then(response => {\n\t\t\t\tif (response.resultCode === 0) {\n\t\t\t\t\tdispatch(setAuthUserData(null, null, null, false));\n\t\t\t\t}\n\t\t\t});\n\t};\n"]},"metadata":{},"sourceType":"module"}