{"ast":null,"code":"import _defineProperty from \"/Users/avovnenko/PhpstormProjects/ReactApp/01-first-project/react-2/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { authAPI } from \"../api/api\";\nimport { stopSubmit } from \"redux-form\";\nimport { authMe } from \"./authReducer\";\nconst INITIALIZED_SUCCESS = 'INITIALIZED-SUCCESS';\nlet initialState = {\n  initialized: false\n};\n\nconst appReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case INITIALIZED_SUCCESS:\n      return _objectSpread({}, state, {\n        initialized: true\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport const initializedSuccess = () => ({\n  type: INITIALIZED_SUCCESS\n});\nexport const initializeApp = () => dispatch => {\n  let dispatchResult = dispatch(authMe());\n  debugger;\n  dispatch(initializedSuccess);\n};\nexport default appReducer;","map":{"version":3,"sources":["/Users/avovnenko/PhpstormProjects/ReactApp/01-first-project/react-2/src/redux/appReducer.js"],"names":["authAPI","stopSubmit","authMe","INITIALIZED_SUCCESS","initialState","initialized","appReducer","state","action","type","initializedSuccess","initializeApp","dispatch","dispatchResult"],"mappings":";;;;;;AAAA,SAAQA,OAAR,QAAsB,YAAtB;AACA,SAAQC,UAAR,QAAyB,YAAzB;AACA,SAAQC,MAAR,QAAqB,eAArB;AAEA,MAAMC,mBAAmB,GAAG,qBAA5B;AAEA,IAAIC,YAAY,GAAG;AAClBC,EAAAA,WAAW,EAAE;AADK,CAAnB;;AAIA,MAAMC,UAAU,GAAG,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAAkC;AAEpD,UAAQA,MAAM,CAACC,IAAf;AACC,SAAKN,mBAAL;AACC,+BACII,KADJ;AAECF,QAAAA,WAAW,EAAE;AAFd;;AAID;AACC,aAAOE,KAAP;AAPF;AASA,CAXD;;AAaA,OAAO,MAAMG,kBAAkB,GAAG,OAAO;AAACD,EAAAA,IAAI,EAAEN;AAAP,CAAP,CAA3B;AAEP,OAAO,MAAMQ,aAAa,GAAG,MAC3BC,QAAD,IAAc;AACb,MAAIC,cAAc,GAAGD,QAAQ,CAACV,MAAM,EAAP,CAA7B;AACA;AACAU,EAAAA,QAAQ,CAACF,kBAAD,CAAR;AACA,CALK;AAOP,eAAeJ,UAAf","sourcesContent":["import {authAPI} from \"../api/api\";\nimport {stopSubmit} from \"redux-form\";\nimport {authMe} from \"./authReducer\";\n\nconst INITIALIZED_SUCCESS = 'INITIALIZED-SUCCESS';\n\nlet initialState = {\n\tinitialized: false\n};\n\nconst appReducer = (state = initialState, action) => {\n\n\tswitch (action.type) {\n\t\tcase INITIALIZED_SUCCESS:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tinitialized: true\n\t\t\t};\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport const initializedSuccess = () => ({type: INITIALIZED_SUCCESS});\n\nexport const initializeApp = () =>\n\t(dispatch) => {\n\t\tlet dispatchResult = dispatch(authMe());\n\t\tdebugger;\n\t\tdispatch(initializedSuccess);\n\t};\n\nexport default appReducer;"]},"metadata":{},"sourceType":"module"}